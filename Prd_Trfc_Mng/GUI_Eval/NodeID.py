#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'NodeID'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 6

# The Active Message type associated with this message.
AM_TYPE = -1

class NodeID(tinyos.message.Message.Message):
    # Create a new NodeID of size 6.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=6):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <NodeID> \n"
        try:
            s += "  [messageType=0x%x]\n" % (self.get_messageType())
        except:
            pass
        try:
            s += "  [packetNo=0x%x]\n" % (self.get_packetNo())
        except:
            pass
        try:
            s += "  [controllerID=0x%x]\n" % (self.get_controllerID())
        except:
            pass
        try:
            s += "  [car_count=0x%x]\n" % (self.get_car_count())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: messageType
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'messageType' is signed (False).
    #
    def isSigned_messageType(self):
        return False
    
    #
    # Return whether the field 'messageType' is an array (False).
    #
    def isArray_messageType(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'messageType'
    #
    def offset_messageType(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'messageType'
    #
    def offsetBits_messageType(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'messageType'
    #
    def get_messageType(self):
        return self.getUIntElement(self.offsetBits_messageType(), 8, 1)
    
    #
    # Set the value of the field 'messageType'
    #
    def set_messageType(self, value):
        self.setUIntElement(self.offsetBits_messageType(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'messageType'
    #
    def size_messageType(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'messageType'
    #
    def sizeBits_messageType(self):
        return 8
    
    #
    # Accessor methods for field: packetNo
    #   Field type: int
    #   Offset (bits): 8
    #   Size (bits): 16
    #

    #
    # Return whether the field 'packetNo' is signed (False).
    #
    def isSigned_packetNo(self):
        return False
    
    #
    # Return whether the field 'packetNo' is an array (False).
    #
    def isArray_packetNo(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'packetNo'
    #
    def offset_packetNo(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'packetNo'
    #
    def offsetBits_packetNo(self):
        return 8
    
    #
    # Return the value (as a int) of the field 'packetNo'
    #
    def get_packetNo(self):
        return self.getUIntElement(self.offsetBits_packetNo(), 16, 1)
    
    #
    # Set the value of the field 'packetNo'
    #
    def set_packetNo(self, value):
        self.setUIntElement(self.offsetBits_packetNo(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'packetNo'
    #
    def size_packetNo(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'packetNo'
    #
    def sizeBits_packetNo(self):
        return 16
    
    #
    # Accessor methods for field: controllerID
    #   Field type: int
    #   Offset (bits): 24
    #   Size (bits): 16
    #

    #
    # Return whether the field 'controllerID' is signed (False).
    #
    def isSigned_controllerID(self):
        return False
    
    #
    # Return whether the field 'controllerID' is an array (False).
    #
    def isArray_controllerID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'controllerID'
    #
    def offset_controllerID(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'controllerID'
    #
    def offsetBits_controllerID(self):
        return 24
    
    #
    # Return the value (as a int) of the field 'controllerID'
    #
    def get_controllerID(self):
        return self.getUIntElement(self.offsetBits_controllerID(), 16, 1)
    
    #
    # Set the value of the field 'controllerID'
    #
    def set_controllerID(self, value):
        self.setUIntElement(self.offsetBits_controllerID(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'controllerID'
    #
    def size_controllerID(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'controllerID'
    #
    def sizeBits_controllerID(self):
        return 16
    
    #
    # Accessor methods for field: car_count
    #   Field type: short
    #   Offset (bits): 40
    #   Size (bits): 8
    #

    #
    # Return whether the field 'car_count' is signed (False).
    #
    def isSigned_car_count(self):
        return False
    
    #
    # Return whether the field 'car_count' is an array (False).
    #
    def isArray_car_count(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'car_count'
    #
    def offset_car_count(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'car_count'
    #
    def offsetBits_car_count(self):
        return 40
    
    #
    # Return the value (as a short) of the field 'car_count'
    #
    def get_car_count(self):
        return self.getUIntElement(self.offsetBits_car_count(), 8, 1)
    
    #
    # Set the value of the field 'car_count'
    #
    def set_car_count(self, value):
        self.setUIntElement(self.offsetBits_car_count(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'car_count'
    #
    def size_car_count(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'car_count'
    #
    def sizeBits_car_count(self):
        return 8
    
